// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: oauth/oauth.proto

package oauth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OAuthRouteClient is the client API for OAuthRoute service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OAuthRouteClient interface {
	CheckUserPermission(ctx context.Context, in *CheckPermissionParams, opts ...grpc.CallOption) (*CheckPermissionResponse, error)
	CheckWSPermission(ctx context.Context, in *CheckPermissionParams, opts ...grpc.CallOption) (*CheckPermissionResponse, error)
	CheckUserWSPermisison(ctx context.Context, in *CheckPermissionParams, opts ...grpc.CallOption) (*CheckPermissionResponse, error)
}

type oAuthRouteClient struct {
	cc grpc.ClientConnInterface
}

func NewOAuthRouteClient(cc grpc.ClientConnInterface) OAuthRouteClient {
	return &oAuthRouteClient{cc}
}

func (c *oAuthRouteClient) CheckUserPermission(ctx context.Context, in *CheckPermissionParams, opts ...grpc.CallOption) (*CheckPermissionResponse, error) {
	out := new(CheckPermissionResponse)
	err := c.cc.Invoke(ctx, "/oauth.OAuthRoute/CheckUserPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthRouteClient) CheckWSPermission(ctx context.Context, in *CheckPermissionParams, opts ...grpc.CallOption) (*CheckPermissionResponse, error) {
	out := new(CheckPermissionResponse)
	err := c.cc.Invoke(ctx, "/oauth.OAuthRoute/CheckWSPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAuthRouteClient) CheckUserWSPermisison(ctx context.Context, in *CheckPermissionParams, opts ...grpc.CallOption) (*CheckPermissionResponse, error) {
	out := new(CheckPermissionResponse)
	err := c.cc.Invoke(ctx, "/oauth.OAuthRoute/CheckUserWSPermisison", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OAuthRouteServer is the server API for OAuthRoute service.
// All implementations must embed UnimplementedOAuthRouteServer
// for forward compatibility
type OAuthRouteServer interface {
	CheckUserPermission(context.Context, *CheckPermissionParams) (*CheckPermissionResponse, error)
	CheckWSPermission(context.Context, *CheckPermissionParams) (*CheckPermissionResponse, error)
	CheckUserWSPermisison(context.Context, *CheckPermissionParams) (*CheckPermissionResponse, error)
	mustEmbedUnimplementedOAuthRouteServer()
}

// UnimplementedOAuthRouteServer must be embedded to have forward compatible implementations.
type UnimplementedOAuthRouteServer struct {
}

func (UnimplementedOAuthRouteServer) CheckUserPermission(context.Context, *CheckPermissionParams) (*CheckPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserPermission not implemented")
}
func (UnimplementedOAuthRouteServer) CheckWSPermission(context.Context, *CheckPermissionParams) (*CheckPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckWSPermission not implemented")
}
func (UnimplementedOAuthRouteServer) CheckUserWSPermisison(context.Context, *CheckPermissionParams) (*CheckPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserWSPermisison not implemented")
}
func (UnimplementedOAuthRouteServer) mustEmbedUnimplementedOAuthRouteServer() {}

// UnsafeOAuthRouteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OAuthRouteServer will
// result in compilation errors.
type UnsafeOAuthRouteServer interface {
	mustEmbedUnimplementedOAuthRouteServer()
}

func RegisterOAuthRouteServer(s grpc.ServiceRegistrar, srv OAuthRouteServer) {
	s.RegisterService(&OAuthRoute_ServiceDesc, srv)
}

func _OAuthRoute_CheckUserPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPermissionParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthRouteServer).CheckUserPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oauth.OAuthRoute/CheckUserPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthRouteServer).CheckUserPermission(ctx, req.(*CheckPermissionParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthRoute_CheckWSPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPermissionParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthRouteServer).CheckWSPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oauth.OAuthRoute/CheckWSPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthRouteServer).CheckWSPermission(ctx, req.(*CheckPermissionParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAuthRoute_CheckUserWSPermisison_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPermissionParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAuthRouteServer).CheckUserWSPermisison(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oauth.OAuthRoute/CheckUserWSPermisison",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAuthRouteServer).CheckUserWSPermisison(ctx, req.(*CheckPermissionParams))
	}
	return interceptor(ctx, in, info, handler)
}

// OAuthRoute_ServiceDesc is the grpc.ServiceDesc for OAuthRoute service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OAuthRoute_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "oauth.OAuthRoute",
	HandlerType: (*OAuthRouteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckUserPermission",
			Handler:    _OAuthRoute_CheckUserPermission_Handler,
		},
		{
			MethodName: "CheckWSPermission",
			Handler:    _OAuthRoute_CheckWSPermission_Handler,
		},
		{
			MethodName: "CheckUserWSPermisison",
			Handler:    _OAuthRoute_CheckUserWSPermisison_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oauth/oauth.proto",
}
