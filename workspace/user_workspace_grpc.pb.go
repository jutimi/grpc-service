// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.2
// source: workspace/user_workspace.proto

package workspace

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserWorkspaceRouteClient is the client API for UserWorkspaceRoute service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserWorkspaceRouteClient interface {
	GetUserWorkspaceByFilter(ctx context.Context, in *GetUserWorkspaceByFilterParams, opts ...grpc.CallOption) (*UserWorkspaceResponse, error)
	GetUserWorkspacesByFilter(ctx context.Context, in *GetUserWorkspaceByFilterParams, opts ...grpc.CallOption) (*UserWorkspacesResponse, error)
}

type userWorkspaceRouteClient struct {
	cc grpc.ClientConnInterface
}

func NewUserWorkspaceRouteClient(cc grpc.ClientConnInterface) UserWorkspaceRouteClient {
	return &userWorkspaceRouteClient{cc}
}

func (c *userWorkspaceRouteClient) GetUserWorkspaceByFilter(ctx context.Context, in *GetUserWorkspaceByFilterParams, opts ...grpc.CallOption) (*UserWorkspaceResponse, error) {
	out := new(UserWorkspaceResponse)
	err := c.cc.Invoke(ctx, "/workspace.UserWorkspaceRoute/GetUserWorkspaceByFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userWorkspaceRouteClient) GetUserWorkspacesByFilter(ctx context.Context, in *GetUserWorkspaceByFilterParams, opts ...grpc.CallOption) (*UserWorkspacesResponse, error) {
	out := new(UserWorkspacesResponse)
	err := c.cc.Invoke(ctx, "/workspace.UserWorkspaceRoute/GetUserWorkspacesByFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserWorkspaceRouteServer is the server API for UserWorkspaceRoute service.
// All implementations must embed UnimplementedUserWorkspaceRouteServer
// for forward compatibility
type UserWorkspaceRouteServer interface {
	GetUserWorkspaceByFilter(context.Context, *GetUserWorkspaceByFilterParams) (*UserWorkspaceResponse, error)
	GetUserWorkspacesByFilter(context.Context, *GetUserWorkspaceByFilterParams) (*UserWorkspacesResponse, error)
	mustEmbedUnimplementedUserWorkspaceRouteServer()
}

// UnimplementedUserWorkspaceRouteServer must be embedded to have forward compatible implementations.
type UnimplementedUserWorkspaceRouteServer struct {
}

func (UnimplementedUserWorkspaceRouteServer) GetUserWorkspaceByFilter(context.Context, *GetUserWorkspaceByFilterParams) (*UserWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserWorkspaceByFilter not implemented")
}
func (UnimplementedUserWorkspaceRouteServer) GetUserWorkspacesByFilter(context.Context, *GetUserWorkspaceByFilterParams) (*UserWorkspacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserWorkspacesByFilter not implemented")
}
func (UnimplementedUserWorkspaceRouteServer) mustEmbedUnimplementedUserWorkspaceRouteServer() {}

// UnsafeUserWorkspaceRouteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserWorkspaceRouteServer will
// result in compilation errors.
type UnsafeUserWorkspaceRouteServer interface {
	mustEmbedUnimplementedUserWorkspaceRouteServer()
}

func RegisterUserWorkspaceRouteServer(s grpc.ServiceRegistrar, srv UserWorkspaceRouteServer) {
	s.RegisterService(&UserWorkspaceRoute_ServiceDesc, srv)
}

func _UserWorkspaceRoute_GetUserWorkspaceByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserWorkspaceByFilterParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserWorkspaceRouteServer).GetUserWorkspaceByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workspace.UserWorkspaceRoute/GetUserWorkspaceByFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserWorkspaceRouteServer).GetUserWorkspaceByFilter(ctx, req.(*GetUserWorkspaceByFilterParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserWorkspaceRoute_GetUserWorkspacesByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserWorkspaceByFilterParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserWorkspaceRouteServer).GetUserWorkspacesByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workspace.UserWorkspaceRoute/GetUserWorkspacesByFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserWorkspaceRouteServer).GetUserWorkspacesByFilter(ctx, req.(*GetUserWorkspaceByFilterParams))
	}
	return interceptor(ctx, in, info, handler)
}

// UserWorkspaceRoute_ServiceDesc is the grpc.ServiceDesc for UserWorkspaceRoute service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserWorkspaceRoute_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "workspace.UserWorkspaceRoute",
	HandlerType: (*UserWorkspaceRouteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserWorkspaceByFilter",
			Handler:    _UserWorkspaceRoute_GetUserWorkspaceByFilter_Handler,
		},
		{
			MethodName: "GetUserWorkspacesByFilter",
			Handler:    _UserWorkspaceRoute_GetUserWorkspacesByFilter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workspace/user_workspace.proto",
}
