// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: workspace/workspace.proto

package workspace

import (
	context "context"
	common "github.com/jutimi/grpc-service/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkspaceRouteClient is the client API for WorkspaceRoute service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkspaceRouteClient interface {
	GetWorkspaceById(ctx context.Context, in *common.GetByIdParams, opts ...grpc.CallOption) (*WorkspaceResponse, error)
}

type workspaceRouteClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkspaceRouteClient(cc grpc.ClientConnInterface) WorkspaceRouteClient {
	return &workspaceRouteClient{cc}
}

func (c *workspaceRouteClient) GetWorkspaceById(ctx context.Context, in *common.GetByIdParams, opts ...grpc.CallOption) (*WorkspaceResponse, error) {
	out := new(WorkspaceResponse)
	err := c.cc.Invoke(ctx, "/workspace.WorkspaceRoute/GetWorkspaceById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkspaceRouteServer is the server API for WorkspaceRoute service.
// All implementations must embed UnimplementedWorkspaceRouteServer
// for forward compatibility
type WorkspaceRouteServer interface {
	GetWorkspaceById(context.Context, *common.GetByIdParams) (*WorkspaceResponse, error)
	mustEmbedUnimplementedWorkspaceRouteServer()
}

// UnimplementedWorkspaceRouteServer must be embedded to have forward compatible implementations.
type UnimplementedWorkspaceRouteServer struct {
}

func (UnimplementedWorkspaceRouteServer) GetWorkspaceById(context.Context, *common.GetByIdParams) (*WorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspaceById not implemented")
}
func (UnimplementedWorkspaceRouteServer) mustEmbedUnimplementedWorkspaceRouteServer() {}

// UnsafeWorkspaceRouteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkspaceRouteServer will
// result in compilation errors.
type UnsafeWorkspaceRouteServer interface {
	mustEmbedUnimplementedWorkspaceRouteServer()
}

func RegisterWorkspaceRouteServer(s grpc.ServiceRegistrar, srv WorkspaceRouteServer) {
	s.RegisterService(&WorkspaceRoute_ServiceDesc, srv)
}

func _WorkspaceRoute_GetWorkspaceById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.GetByIdParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceRouteServer).GetWorkspaceById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workspace.WorkspaceRoute/GetWorkspaceById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceRouteServer).GetWorkspaceById(ctx, req.(*common.GetByIdParams))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkspaceRoute_ServiceDesc is the grpc.ServiceDesc for WorkspaceRoute service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkspaceRoute_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "workspace.WorkspaceRoute",
	HandlerType: (*WorkspaceRouteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWorkspaceById",
			Handler:    _WorkspaceRoute_GetWorkspaceById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workspace/workspace.proto",
}
